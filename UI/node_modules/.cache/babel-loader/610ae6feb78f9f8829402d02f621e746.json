{"ast":null,"code":"import _defineProperty from \"/home/rakshithjk/Desktop/react/pictureperfect/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from 'redux';\nimport { createReducer, createAsyncReducer } from '../common/redux.helpers';\nimport { keys as movieActionKeys } from './movie-browser.actions';\nimport movieModalReducer from './movie-modal/movie-modal.reducer'; // This will create a new state with both the existing \n// movies and new pages of movies\n\nconst moviesSuccessReducer = (state, action) => {\n  const existingMovies = state.response ? state.response.results : []; // Create a new state object to be returned\n  // When creating the new state, be sure to include any\n  // existing properties we want to persist\n\n  alert(state.sortState);\n  return _objectSpread({}, state, {\n    isLoading: false,\n    response: _objectSpread({}, action.response, {\n      results: [...existingMovies, ...action.response.results]\n    })\n  });\n}; // Combines our movie browser related reducers to build our movieBrowser reducer\n\n\nconst movieBrowserReducer = combineReducers({\n  movieModal: movieModalReducer,\n  topMovies: createAsyncReducer(movieActionKeys.GET_TOP_MOVIES, {\n    [\"\".concat(movieActionKeys.GET_TOP_MOVIES, \"_SUCCESS\")]: moviesSuccessReducer\n  }),\n  movieSearch: createAsyncReducer(movieActionKeys.SEARCH_MOVIES, {\n    [\"\".concat(movieActionKeys.SEARCH_MOVIES, \"_SUCCESS\")]: moviesSuccessReducer\n  }),\n  movieDetails: createAsyncReducer(movieActionKeys.GET_MOVIE_DETAILS)\n});\nexport default movieBrowserReducer;","map":{"version":3,"sources":["/home/rakshithjk/Desktop/react/pictureperfect/src/modules/movie-browser/movie-browser.reducers.js"],"names":["combineReducers","createReducer","createAsyncReducer","keys","movieActionKeys","movieModalReducer","moviesSuccessReducer","state","action","existingMovies","response","results","alert","sortState","isLoading","movieBrowserReducer","movieModal","topMovies","GET_TOP_MOVIES","movieSearch","SEARCH_MOVIES","movieDetails","GET_MOVIE_DETAILS"],"mappings":";;;;;;AAAA,SAAQA,eAAR,QAA8B,OAA9B;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,yBAAlD;AACA,SAASC,IAAI,IAAIC,eAAjB,QAAwC,yBAAxC;AACA,OAAOC,iBAAP,MAA8B,mCAA9B,C,CAEA;AACA;;AACA,MAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9C,QAAMC,cAAc,GAAGF,KAAK,CAACG,QAAN,GAAiBH,KAAK,CAACG,QAAN,CAAeC,OAAhC,GAA0C,EAAjE,CAD8C,CAE9C;AACA;AACA;;AACAC,EAAAA,KAAK,CAACL,KAAK,CAACM,SAAP,CAAL;AACA,2BACKN,KADL;AAEEO,IAAAA,SAAS,EAAE,KAFb;AAGEJ,IAAAA,QAAQ,oBACHF,MAAM,CAACE,QADJ;AAENC,MAAAA,OAAO,EAAE,CACP,GAAGF,cADI,EAEP,GAAGD,MAAM,CAACE,QAAP,CAAgBC,OAFZ;AAFH;AAHV;AAYC,CAlBH,C,CAqBA;;;AACA,MAAMI,mBAAmB,GAAGf,eAAe,CAAC;AAC1CgB,EAAAA,UAAU,EAAEX,iBAD8B;AAE1CY,EAAAA,SAAS,EAAEf,kBAAkB,CAACE,eAAe,CAACc,cAAjB,EAAiC;AAC5D,eAAId,eAAe,CAACc,cAApB,gBAA+CZ;AADa,GAAjC,CAFa;AAK1Ca,EAAAA,WAAW,EAAEjB,kBAAkB,CAACE,eAAe,CAACgB,aAAjB,EAAgC;AAC7D,eAAIhB,eAAe,CAACgB,aAApB,gBAA8Cd;AADe,GAAhC,CALW;AAQ1Ce,EAAAA,YAAY,EAAEnB,kBAAkB,CAACE,eAAe,CAACkB,iBAAjB;AARU,CAAD,CAA3C;AAWA,eAAeP,mBAAf","sourcesContent":["import {combineReducers} from 'redux';\nimport { createReducer, createAsyncReducer } from '../common/redux.helpers';\nimport { keys as movieActionKeys } from './movie-browser.actions';\nimport movieModalReducer from './movie-modal/movie-modal.reducer';\n\n// This will create a new state with both the existing \n// movies and new pages of movies\nconst moviesSuccessReducer = (state, action) => {\n  const existingMovies = state.response ? state.response.results : [];\n  // Create a new state object to be returned\n  // When creating the new state, be sure to include any\n  // existing properties we want to persist\n  alert(state.sortState);\n  return {\n    ...state,\n    isLoading: false,\n    response: {\n      ...action.response,\n      results: [\n        ...existingMovies,\n        ...action.response.results\n      ]\n    }\n  };\n\n  };\n\n\n// Combines our movie browser related reducers to build our movieBrowser reducer\nconst movieBrowserReducer = combineReducers({\n  movieModal: movieModalReducer,\n  topMovies: createAsyncReducer(movieActionKeys.GET_TOP_MOVIES, {\n    [`${movieActionKeys.GET_TOP_MOVIES}_SUCCESS`]: moviesSuccessReducer\n  }),\n  movieSearch: createAsyncReducer(movieActionKeys.SEARCH_MOVIES, {\n    [`${movieActionKeys.SEARCH_MOVIES}_SUCCESS`]: moviesSuccessReducer\n  }),\n  movieDetails: createAsyncReducer(movieActionKeys.GET_MOVIE_DETAILS),\n});\n\nexport default movieBrowserReducer;"]},"metadata":{},"sourceType":"module"}
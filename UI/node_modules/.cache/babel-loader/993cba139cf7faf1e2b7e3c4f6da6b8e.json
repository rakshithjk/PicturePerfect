{"ast":null,"code":"import _defineProperty from \"/home/rakshithjk/Desktop/react/pictureperfect/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Helper function to create reducers. It will allow us to write reducers\n// as an object.\nexport const createReducer = (initialState = {}, actionHandlerKeyFuncs = {}) => {\n  return (state = initialState, action) => {\n    const actionHandler = actionHandlerKeyFuncs[action.type];\n    return actionHandler ? actionHandler(state, action) : state;\n  };\n}; // Creates a basic action\n\nconst createAction = (type, actionProps) => {\n  return _objectSpread({\n    type\n  }, actionProps);\n}; // e.g. createAsyncActionCreator('GET_TOP_MOVIES', getTopMovies, {page: 1})\n// I admit that passing the asyncRequestFn without params is not ideal, but \n// wanted to capture the requestParams as part of the start action for logging transparency\n\n\nexport const createAsyncActionCreator = (actionType, asyncRequestFn, requestParams) => {\n  return dispatch => {\n    dispatch(createAction(\"\".concat(actionType, \"_START\"), {\n      request: requestParams\n    })); // NOTE: asyncRequestFn must accept single object parameter\n    // in order to resolve param values\n\n    return fetch('localhost:10000/movie/top_rated').then(response => {\n      response.json().then(json => dispatch(createAction(\"\".concat(actionType, \"_SUCCESS\"), {\n        response: json\n      }))).catch(error => dispatch(createAction(\"\".concat(actionType, \"_ERROR\"), {\n        error\n      })));\n    });\n  };\n}; // We're setting these based on the state of the request\n\nconst initialAsyncState = {\n  isLoading: false,\n  response: null,\n  request: null\n}; // Generic way of handling state changes for an async request\n// Can override {action_type}_START, {action_type}_SUCCESS, {action_type}_ERROR\n\nexport const createAsyncReducer = (actionType, actionHandlerKeyFuncs = {}, initialState = initialAsyncState) => {\n  const startReducerFn = (state, action) => _objectSpread({}, state, {\n    isLoading: true,\n    request: action.request\n  });\n\n  const successReducerFn = (state, action) => _objectSpread({}, state, {\n    isLoading: false,\n    response: action.response\n  });\n\n  const errorReducerFn = (state, action) => _objectSpread({}, state, {\n    isLoading: false,\n    error: action.error\n  });\n\n  return createReducer(initialState, _objectSpread({\n    [\"\".concat(actionType, \"_START\")]: startReducerFn,\n    [\"\".concat(actionType, \"_SUCCESS\")]: successReducerFn,\n    [\"\".concat(actionType, \"_ERROR\")]: errorReducerFn\n  }, actionHandlerKeyFuncs));\n};","map":{"version":3,"sources":["/home/rakshithjk/Desktop/react/pictureperfect/src/modules/common/redux.helpers.js"],"names":["createReducer","initialState","actionHandlerKeyFuncs","state","action","actionHandler","type","createAction","actionProps","createAsyncActionCreator","actionType","asyncRequestFn","requestParams","dispatch","request","fetch","then","response","json","catch","error","initialAsyncState","isLoading","createAsyncReducer","startReducerFn","successReducerFn","errorReducerFn"],"mappings":";;;;;;AAAA;AACA;AACA,OAAO,MAAMA,aAAa,GAAG,CAACC,YAAY,GAAG,EAAhB,EAAoBC,qBAAqB,GAAG,EAA5C,KAAmD;AAC5E,SAAO,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AACvC,UAAMC,aAAa,GAAGH,qBAAqB,CAACE,MAAM,CAACE,IAAR,CAA3C;AACA,WAAOD,aAAa,GAAGA,aAAa,CAACF,KAAD,EAAQC,MAAR,CAAhB,GAAkCD,KAAtD;AACD,GAHD;AAID,CALI,C,CAOL;;AACF,MAAMI,YAAY,GAAG,CAACD,IAAD,EAAOE,WAAP,KAAuB;AACxC;AACEF,IAAAA;AADF,KAEKE,WAFL;AAKD,CANH,C,CAQE;AACF;AACA;;;AACA,OAAO,MAAMC,wBAAwB,GAAG,CAACC,UAAD,EAAaC,cAAb,EAA6BC,aAA7B,KAA+C;AACnF,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACN,YAAY,WAAIG,UAAJ,aAAwB;AAACI,MAAAA,OAAO,EAAEF;AAAV,KAAxB,CAAb,CAAR,CADmB,CAEnB;AACA;;AACA,WAAOG,KAAK,CAAC,iCAAD,CAAL,CAAyCC,IAAzC,CAA8CC,QAAQ,IAAI;AAC7DA,MAAAA,QAAQ,CAACC,IAAT,GACGF,IADH,CACQE,IAAI,IAAIL,QAAQ,CAACN,YAAY,WAAIG,UAAJ,eAA0B;AAAEO,QAAAA,QAAQ,EAAEC;AAAZ,OAA1B,CAAb,CADxB,EAEGC,KAFH,CAESC,KAAK,IAAIP,QAAQ,CAACN,YAAY,WAAIG,UAAJ,aAAwB;AAAEU,QAAAA;AAAF,OAAxB,CAAb,CAF1B;AAGD,KAJI,CAAP;AAMD,GAVD;AAWD,CAZI,C,CAcL;;AACF,MAAMC,iBAAiB,GAAG;AAAEC,EAAAA,SAAS,EAAE,KAAb;AAAoBL,EAAAA,QAAQ,EAAE,IAA9B;AAAoCH,EAAAA,OAAO,EAAE;AAA7C,CAA1B,C,CAEA;AACA;;AACA,OAAO,MAAMS,kBAAkB,GAAG,CAACb,UAAD,EAAaR,qBAAqB,GAAG,EAArC,EAAyCD,YAAY,GAAGoB,iBAAxD,KAA8E;AAC7G,QAAMG,cAAc,GAAG,CAACrB,KAAD,EAAQC,MAAR,uBACjBD,KADiB;AAEpBmB,IAAAA,SAAS,EAAE,IAFS;AAGpBR,IAAAA,OAAO,EAAEV,MAAM,CAACU;AAHI,IAAvB;;AAMD,QAAMW,gBAAgB,GAAG,CAACtB,KAAD,EAAQC,MAAR,uBAClBD,KADkB;AAErBmB,IAAAA,SAAS,EAAE,KAFU;AAGrBL,IAAAA,QAAQ,EAAEb,MAAM,CAACa;AAHI,IAAzB;;AAKA,QAAMS,cAAc,GAAG,CAACvB,KAAD,EAAQC,MAAR,uBAChBD,KADgB;AAEnBmB,IAAAA,SAAS,EAAE,KAFQ;AAGnBF,IAAAA,KAAK,EAAEhB,MAAM,CAACgB;AAHK,IAAvB;;AAMA,SAAOpB,aAAa,CAClBC,YADkB;AAGhB,eAAIS,UAAJ,cAAyBc,cAHT;AAIhB,eAAId,UAAJ,gBAA2Be,gBAJX;AAKhB,eAAIf,UAAJ,cAAyBgB;AALT,KAMbxB,qBANa,EAApB;AASD,CA3BM","sourcesContent":["// Helper function to create reducers. It will allow us to write reducers\n// as an object.\nexport const createReducer = (initialState = {}, actionHandlerKeyFuncs = {}) => {\n    return (state = initialState, action) => {\n      const actionHandler = actionHandlerKeyFuncs[action.type];\n      return actionHandler ? actionHandler(state, action) : state;\n    }\n  };\n\n  // Creates a basic action\nconst createAction = (type, actionProps) => {\n    return {\n      type,\n      ...actionProps\n      // ... is spread operator\n    };\n  }\n\n  // e.g. createAsyncActionCreator('GET_TOP_MOVIES', getTopMovies, {page: 1})\n// I admit that passing the asyncRequestFn without params is not ideal, but \n// wanted to capture the requestParams as part of the start action for logging transparency\nexport const createAsyncActionCreator = (actionType, asyncRequestFn, requestParams) => {\n    return (dispatch) => {\n      dispatch(createAction(`${actionType}_START`, {request: requestParams}));\n      // NOTE: asyncRequestFn must accept single object parameter\n      // in order to resolve param values\n      return fetch('localhost:10000/movie/top_rated').then(response => {\n          response.json()\n            .then(json => dispatch(createAction(`${actionType}_SUCCESS`, { response: json })))\n            .catch(error => dispatch(createAction(`${actionType}_ERROR`, { error })));\n        });\n        \n    };\n  }\n\n  // We're setting these based on the state of the request\nconst initialAsyncState = { isLoading: false, response: null, request: null };\n\n// Generic way of handling state changes for an async request\n// Can override {action_type}_START, {action_type}_SUCCESS, {action_type}_ERROR\nexport const createAsyncReducer = (actionType, actionHandlerKeyFuncs = {}, initialState = initialAsyncState) => {\n   const startReducerFn = (state, action) => ({\n      ...state,\n      isLoading: true,\n      request: action.request\n  });\n\n  const successReducerFn = (state, action) => ({\n      ...state,\n      isLoading: false,\n      response: action.response\n  });\n  const errorReducerFn = (state, action) => ({\n      ...state,\n      isLoading: false,\n      error: action.error\n  });\n\n  return createReducer(\n    initialState,\n    {\n      [`${actionType}_START`]: startReducerFn,\n      [`${actionType}_SUCCESS`]: successReducerFn,\n      [`${actionType}_ERROR`]: errorReducerFn,\n      ...actionHandlerKeyFuncs\n    }\n  );\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/rakshithjk/Desktop/react/pictureperfect/src/modules/movie-browser/movie-modal/movie-modal.container.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Dialog } from 'material-ui';\nimport _ from 'lodash';\nimport { closeMovieModal } from './movie-modal.actions';\nimport { getMovieDetails } from '../movie-browser.actions';\nimport * as movieHelpers from '../movie-browser.helpers';\nimport Loader from '../../common/loader.component';\nconst styles = {\n  // Can use functions to dynamically build our CSS\n  dialogContent: backgroundUrl => ({\n    backgroundImage: \"linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url(\".concat(backgroundUrl, \")\"),\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: '100%',\n    height: '100%',\n    minHeight: 400,\n    color: 'white',\n    padding: 10\n  })\n};\n\nclass MovieModalContainer extends React.Component {\n  // Triggered right after a property is changed\n  componentWillReceiveProps(nextProps) {\n    // If we will receive a new movieId\n    console.log(\"####comom\", nextProps);\n\n    if (nextProps.movieId && this.props.movieId !== nextProps.movieId) {\n      nextProps.getMovieDetails(nextProps.movieId);\n    }\n  }\n\n  render() {\n    console.log(\"modal\", this);\n    const _this$props = this.props,\n          isOpen = _this$props.isOpen,\n          closeMovieModal = _this$props.closeMovieModal,\n          isLoading = _this$props.isLoading;\n    const loadingStatus = isLoading ? 'loading' : 'hide';\n    const movie = this.props.movie ? movieHelpers.updateMoviePictureUrls(this.props.movie) : \"\";\n    const genres = movie && movie.genres ? movie.genres.map(genre => genre.name).join(', ') : '';\n    return React.createElement(Dialog, {\n      autoScrollBodyContent: true,\n      title: null,\n      modal: false,\n      open: isOpen,\n      onRequestClose: closeMovieModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      isLoading: isLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: styles.dialogContent(movie.backdrop_path),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, movie.title), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, genres), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, movie.overview), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Popularity: \", movie.popularity), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Budget: $\", movie.budget))));\n  }\n\n} // \"connect\" our movie modal to the component store\n\n\nexport default connect( // Map nodes in our state to a properties of our component\nstate => ({\n  // Using lodash get, recursively check that a property is defined\n  // before try to access it - if it is undefined, it will return your default value\n  // _.get(object, 'path.to.targets[0].neat.stuff', defaultValue)\n  isOpen: _.get(state, 'movieBrowser.movieModal.isOpen', false),\n  movieId: _.get(state, 'movieBrowser.movieModal.movieId'),\n  movie: _.get(state, 'movieBrowser.movieDetails.response', {}),\n  isLoading: _.get(state, 'movieBrowser.movieDetails.isLoading', false)\n}), // Map an action to a prop, ready to be dispatched\n{\n  closeMovieModal,\n  getMovieDetails\n})(MovieModalContainer);","map":{"version":3,"sources":["/home/rakshithjk/Desktop/react/pictureperfect/src/modules/movie-browser/movie-modal/movie-modal.container.js"],"names":["React","connect","Dialog","_","closeMovieModal","getMovieDetails","movieHelpers","Loader","styles","dialogContent","backgroundUrl","backgroundImage","backgroundRepeat","backgroundSize","height","minHeight","color","padding","MovieModalContainer","Component","componentWillReceiveProps","nextProps","console","log","movieId","props","render","isOpen","isLoading","loadingStatus","movie","updateMoviePictureUrls","genres","map","genre","name","join","backdrop_path","title","overview","popularity","budget","state","get"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport { Dialog } from 'material-ui';\nimport _ from 'lodash';\nimport { closeMovieModal } from './movie-modal.actions';\nimport { getMovieDetails } from '../movie-browser.actions';\nimport * as movieHelpers from '../movie-browser.helpers';\nimport Loader from '../../common/loader.component';\n\nconst styles = {\n  // Can use functions to dynamically build our CSS\n  dialogContent: (backgroundUrl) => ({\n    backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url(${backgroundUrl})`,\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: '100%',\n    height: '100%',\n    minHeight: 400,\n    color: 'white',\n    padding: 10\n  })\n}\n\nclass MovieModalContainer extends React.Component {\n  // Triggered right after a property is changed\n  componentWillReceiveProps(nextProps) {\n    // If we will receive a new movieId\n    console.log(\"####comom\", nextProps);\n    if (nextProps.movieId && this.props.movieId !== nextProps.movieId) {\n      nextProps.getMovieDetails(nextProps.movieId);\n    }\n  }\n\n  render() {\n    console.log(\"modal\",this);\n    const {isOpen, closeMovieModal, isLoading} = this.props;\n    const loadingStatus = isLoading ? 'loading' : 'hide';\n    const movie = (this.props.movie) ? movieHelpers.updateMoviePictureUrls(this.props.movie) : \"\";\n    const genres = (movie && movie.genres) ? movie.genres.map(genre => genre.name).join(', ') : '';\n\n    return (\n      <Dialog\n        autoScrollBodyContent={true}\n        title={null}\n        modal={false}\n        open={isOpen}\n        onRequestClose={closeMovieModal}\n      >\n        <Loader isLoading={isLoading}>\n          <div style={styles.dialogContent(movie.backdrop_path)}>\n            <h1>{movie.title}</h1>\n            <h5>{genres}</h5>\n            <p>{movie.overview}</p>\n            <p>Popularity: {movie.popularity}</p>\n            <p>Budget: ${movie.budget}</p>\n          </div>\n        </Loader>\n    </Dialog>\n    );\n  }\n}\n// \"connect\" our movie modal to the component store\nexport default connect(\n  // Map nodes in our state to a properties of our component\n  (state) => ({\n    // Using lodash get, recursively check that a property is defined\n    // before try to access it - if it is undefined, it will return your default value\n    // _.get(object, 'path.to.targets[0].neat.stuff', defaultValue)\n    isOpen: _.get(state, 'movieBrowser.movieModal.isOpen', false),\n    movieId: _.get(state, 'movieBrowser.movieModal.movieId'),\n    movie: _.get(state, 'movieBrowser.movieDetails.response', {}),\n    isLoading: _.get(state, 'movieBrowser.movieDetails.isLoading', false),\n  }),\n  // Map an action to a prop, ready to be dispatched\n  { closeMovieModal, getMovieDetails }\n)(MovieModalContainer);"]},"metadata":{},"sourceType":"module"}